from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import MASTER_BOT_TOKEN
from database import Session, User, WorkerBotDB, SubscriptionDB, UsageStatsDB, SentMaterial
from worker_bot import WorkerBotInstance
from aiogram.utils.exceptions import Unauthorized
import asyncio
from datetime import datetime, timedelta
import asyncio
from worker_bot import WorkerBotInstance

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=MASTER_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = message.from_user
    with Session() as session:
        db_user = session.query(User).filter(User.user_id == user.id).first()
        if not db_user:
            db_user = User(user_id=user.id, username=user.username)
            session.add(db_user)
            session.commit()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –º–∞—Å—Ç–µ—Ä-–±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /add_bot —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞.")

@dp.message_handler(commands=['start_bot'])
async def start_worker_bot(message: types.Message):
    user_id = message.from_user.id
    with Session() as session:
        bot = session.query(WorkerBotDB).filter(WorkerBotDB.owner_id == user_id).first()
        if not bot:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /add_bot.")
            return

        if bot.token not in active_worker_bots:
            try:
                worker = WorkerBotInstance(token=bot.token)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞
                task = asyncio.create_task(worker.start())
                active_worker_bots[bot.token] = task
                bot.is_active = True
                session.commit()
                await message.answer("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        else:
            await message.answer("‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

@dp.message_handler(commands=['my_bots'])
async def list_bots(message: types.Message):
    user_id = message.from_user.id
    with Session() as session:
        bots = session.query(WorkerBotDB).filter(WorkerBotDB.owner_id == user_id).all()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if not bots:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤.")
            return
        response = "–í–∞—à–∏ –±–æ—Ç—ã:\n" + "\n".join([f"ID: {bot.bot_id}, –¢–æ–∫–µ–Ω: {bot.token[:5]}..." for bot in bots])
        await message.answer(response)


active_worker_bots = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {token: task}

@dp.message_handler(commands=['start_bot'])
async def start_worker_bot(message: types.Message):
    user_id = message.from_user.id
    with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot = session.query(WorkerBotDB).filter(WorkerBotDB.owner_id == user_id).first()
        if not bot:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /add_bot.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = session.query(SubscriptionDB).filter(SubscriptionDB.bot_id == bot.bot_id).first()
        if not subscription or subscription.end_date < datetime.now():
            await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ /buy_subscription.")
            return

        # –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        if bot.token in active_worker_bots:
            await message.answer("–ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
        try:
            worker = WorkerBotInstance(token=bot.token)
            task = asyncio.create_task(worker.start())
            active_worker_bots[bot.token] = task
            bot.is_active = True
            session.commit()
            await message.answer("–†–∞–±–æ—á–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        except Unauthorized:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –£–¥–∞–ª–∏—Ç–µ –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")


@dp.message_handler(commands=['stop_bot'])
async def stop_worker_bot(message: types.Message):
    user_id = message.from_user.id
    with Session() as session:
        bot = session.query(WorkerBotDB).filter(WorkerBotDB.owner_id == user_id).first()
        if not bot:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤.")
            return

        if bot.token in active_worker_bots:
            task = active_worker_bots.pop(bot.token)
            task.cancel()
            bot.is_active = False
            session.commit()
            await message.answer("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            await message.answer("–ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")

@dp.message_handler(commands=['buy_subscription'])
async def buy_subscription(message: types.Message):
    # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ (30 –¥–Ω–µ–π) - $10", callback_data="tariff_all"))
    markup.add(types.InlineKeyboardButton("–£—Ä–µ–∑–∞–Ω–Ω—ã–π (30 –¥–Ω–µ–π) - $5", callback_data="tariff_limited"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)


async def check_limits(master_bot: Bot):
    while True:
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        with Session() as session:
            bots = session.query(WorkerBotDB).all()
            for bot in bots:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                materials_sent = session.query(SentMaterial)\
                    .filter(SentMaterial.bot_id == bot.bot_id)\
                    .count()

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –±–æ—Ç–∞
                subscription = session.query(SubscriptionDB)\
                    .filter(SubscriptionDB.bot_id == bot.bot_id)\
                    .first()

                if subscription and materials_sent >= subscription.material_limit:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞
                    if bot.token in active_worker_bots:
                        task = active_worker_bots.pop(bot.token)
                        task.cancel()
                        bot.is_active = False
                        session.commit()

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                        await master_bot.send_message(
                            chat_id=bot.owner_id,
                            text=f"üö´ –ë–æ—Ç {bot.bot_username} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ª–∏–º–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!"
                        )

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(check_limits(bot))  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤
    asyncio.run(dp.start_polling())