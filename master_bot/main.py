from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import MASTER_BOT_TOKEN
from database import Session, User, WorkerBotDB, SubscriptionDB, UsageStatsDB, SentMaterial
from worker_bot import WorkerBotInstance
from aiogram.utils.exceptions import Unauthorized
import asyncio
from datetime import datetime, timedelta
import asyncio
from worker_bot import WorkerBotInstance

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=MASTER_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


active_worker_bots = {}  # –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = message.from_user
    with Session() as session:
        db_user = session.query(User).filter(User.user_id == user.id).first()
        if not db_user:
            db_user = User(user_id=user.id, username=user.username)
            session.add(db_user)
            session.commit()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –º–∞—Å—Ç–µ—Ä-–±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /add_bot —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞.")


@dp.message_handler(commands=['add_bot'])
async def add_bot(message: types.Message):
    args = message.get_args()
    if not args:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: /add_bot <—Ç–æ–∫–µ–Ω>")
        return

    token = args.strip()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    if len(token.split(':')) != 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return

    with Session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç —Ä–∞–Ω–µ–µ
        existing_bot = session.query(WorkerBotDB).filter(WorkerBotDB.token == token).first()
        if existing_bot:
            await message.answer("–≠—Ç–æ—Ç –±–æ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±–æ—Ç–µ
        new_bot = WorkerBotDB(
            owner_id=user_id,
            token=token,
            bot_username=token.split(':')[0],
            is_active=False
        )
        session.add(new_bot)
        session.commit()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        trial_sub = SubscriptionDB(
            bot_id=new_bot.bot_id,
            tariff="trial",
            end_date=datetime.now() + timedelta(days=7),
            material_limit=100
        )
        session.add(trial_sub)
        session.commit()

    await message.answer("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π.")


@dp.message_handler(commands=['start_bot'])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –∫–æ–º–∞–Ω–¥—ã
async def start_bot(message: types.Message):
    user_id = message.from_user.id
    with Session() as session:
        bot = session.query(WorkerBotDB).filter(WorkerBotDB.owner_id == user_id).first()
        if not bot:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /add_bot.")
            return

        if bot.token in active_worker_bots:
            await message.answer("‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...")
            old_worker = active_worker_bots.pop(bot.token)
            await old_worker.stop()

        try:
            worker = WorkerBotInstance(token=bot.token)
            active_worker_bots[bot.token] = worker
            bot.is_active = True
            session.commit()
            
            async def worker_wrapper(worker):
                try:
                    await worker.start()
                except Exception as e:
                    print(f"–ë–æ—Ç {worker.token} —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
                finally:
                    if worker.token in active_worker_bots:
                        del active_worker_bots[worker.token]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            asyncio.create_task(worker_wrapper(worker))
            
            await message.answer("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")

@dp.message_handler(commands=['my_bots'])
async def list_bots(message: types.Message):
    user_id = message.from_user.id
    with Session() as session:
        bots = session.query(WorkerBotDB).filter(WorkerBotDB.owner_id == user_id).all()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if not bots:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤.")
            return
        response = "–í–∞—à–∏ –±–æ—Ç—ã:\n" + "\n".join([f"ID: {bot.bot_id}, –¢–æ–∫–µ–Ω: {bot.token[:5]}..." for bot in bots])
        await message.answer(response)


@dp.message_handler(commands=['stop_bot'])
async def stop_worker_bot(message: types.Message):
    user_id = message.from_user.id
    
    try:
        with Session() as session:
            # 1. –ò—â–µ–º –í–°–ï–• –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bots = session.query(WorkerBotDB).filter(WorkerBotDB.owner_id == user_id).all()
            if not bots:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤.")
                return

            stopped_count = 0
            for bot in bots:
                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–æ—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                if bot.token in active_worker_bots:
                    # 3. –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–æ—Ä–∫–µ—Ä–∞
                    worker = active_worker_bots.pop(bot.token)
                    
                    # 4. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    try:
                        await worker.stop()
                    except Exception as stop_error:
                        print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot.token}: {stop_error}")
                        continue
                    
                    # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                    bot.is_active = False
                    stopped_count += 1

            # 6. –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
            session.commit()
            
            # 7. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if stopped_count > 0:
                await message.answer(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–æ—Ç–æ–≤: {stopped_count}")
            else:
                await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ stop_bot: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–æ–≤")

@dp.message_handler(commands=['buy_subscription'])
async def buy_subscription(message: types.Message):
    # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ (30 –¥–Ω–µ–π) - $10", callback_data="tariff_all"))
    markup.add(types.InlineKeyboardButton("–£—Ä–µ–∑–∞–Ω–Ω—ã–π (30 –¥–Ω–µ–π) - $5", callback_data="tariff_limited"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)


async def check_limits(master_bot: Bot):
    while True:
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        with Session() as session:
            bots = session.query(WorkerBotDB).all()
            for bot in bots:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                materials_sent = session.query(SentMaterial)\
                    .filter(SentMaterial.bot_id == bot.bot_id)\
                    .count()

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –±–æ—Ç–∞
                subscription = session.query(SubscriptionDB)\
                    .filter(SubscriptionDB.bot_id == bot.bot_id)\
                    .first()

                if subscription and materials_sent >= subscription.material_limit:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞
                    if bot.token in active_worker_bots:
                        task = active_worker_bots.pop(bot.token)
                        task.cancel()
                        bot.is_active = False
                        session.commit()

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                        await master_bot.send_message(
                            chat_id=bot.owner_id,
                            text=f"üö´ –ë–æ—Ç {bot.bot_username} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ª–∏–º–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!"
                        )

async def restore_active_bots():
    with Session() as session:
        active_bots = session.query(WorkerBotDB).filter(WorkerBotDB.is_active == True).all()
        for bot in active_bots:
            worker = WorkerBotInstance(token=bot.token)
            active_worker_bots[bot.token] = worker
            asyncio.create_task(worker.start())

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(restore_active_bots())  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤
    loop.create_task(check_limits(bot))
    asyncio.run(dp.start_polling())