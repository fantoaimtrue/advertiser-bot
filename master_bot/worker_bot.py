from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from database import Session, SentMaterial, WorkerBotDB  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
from config import MASTER_BOT_TOKEN  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –º–∞—Å—Ç–µ—Ä-–±–æ—Ç–∞

class WorkerBotInstance:
    def __init__(self, token):
        self.token = token  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞
        self.bot = Bot(token=token)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞
        self.master_bot = Bot(token=MASTER_BOT_TOKEN)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä-–±–æ—Ç–∞
        self.dp = Dispatcher(self.bot, storage=MemoryStorage())
        self._register_handlers()

    def _register_handlers(self):
        @self.dp.message_handler(commands=['start'])
        async def start(message: types.Message):
            await message.answer("–Ø —Ä–∞–±–æ—á–∏–π –±–æ—Ç! –ú–æ—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø—Ä–æ–¥–∞–∂–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")

        @self.dp.message_handler(commands=['send_material'])
        async def send_material(message: types.Message):
            chat_id = message.chat.id
            bot_id = self._get_bot_id()  # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞ –∏–∑ –ë–î

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ
            with Session() as session:
                material = SentMaterial(
                    bot_id=bot_id,
                    chat_id=chat_id,
                    sent_at=datetime.now()
                )
                session.add(material)
                session.commit()

                # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
                bot = session.query(WorkerBotDB).filter(WorkerBotDB.bot_id == bot_id).first()
                if not bot:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                    return

                owner_id = bot.owner_id  # ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –≤ Telegram

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä-–±–æ—Ç–∞
            await self.master_bot.send_message(
                chat_id=owner_id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
                text=f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}."
            )

            await message.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    def _get_bot_id(self):
        # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞ –∏–∑ –ë–î –ø–æ —Ç–æ–∫–µ–Ω—É
        with Session() as session:
            bot = session.query(WorkerBotDB).filter(WorkerBotDB.token == self.token).first()
            return bot.bot_id if bot else None

    async def start(self):
        try:
            await self.dp.start_polling()
        finally:
            await self.dp.storage.close()

    async def stop(self):
        await self.dp.storage.close()
        await self.bot.close()
        await self.master_bot.close()
        